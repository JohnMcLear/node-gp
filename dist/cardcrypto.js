"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var crypto_1 = require("crypto");
var CardCrypto = /** @class */ (function () {
    function CardCrypto() {
    }
    /**
     * Calculates a DES session key as per GP Card Spec 2.1.1 E.4.1.
     * @param data the input data
     * @param key the cipher key
     */
    CardCrypto.tripleDesCbc = function (data, key) {
        var cipher = crypto_1.createCipheriv('des-ede-cbc', key, Buffer.alloc(8));
        cipher.setAutoPadding(false);
        var b = cipher.update(data);
        var f = cipher.final();
        return Buffer.concat([b, f], b.length + f.length);
    };
    CardCrypto.getRetailMac = function (keystr, datastr, ivstr) {
        // bit pad
        var datastrpadded = datastr + "8000000000000000";
        datastrpadded = datastrpadded.substring(0, datastrpadded.length - (datastrpadded.length % 16));
        var key = Buffer.from(keystr, "hex");
        var data = Buffer.from(datastrpadded, "hex");
        var iv = Buffer.from(ivstr, "hex");
        var k1 = key.slice(0, 8);
        var k2 = key.slice(8, 16);
        var c1 = function () {
            var c = crypto_1.createCipheriv("des-cbc", k1, Buffer.alloc(8));
            c.setAutoPadding(false);
            return c;
        };
        var c2 = function () {
            var c = crypto_1.createDecipheriv("des-cbc", k2, Buffer.alloc(8));
            c.setAutoPadding(false);
            return c;
        };
        var bc = data.length / 8;
        var transformation1 = c1().update(data.slice(0, 8));
        var buffer = Buffer.alloc(8);
        for (var i = 1; i < bc; i++) {
            var block = data.slice(8 * i, 8 * (i + 1));
            for (var j = 0; j < 8; j++) {
                buffer[j] = transformation1[j] ^ block[j];
            }
            transformation1 = c1().update(buffer);
        }
        var transformation3d = c2().update(transformation1);
        var transformation3 = c1().update(transformation3d);
        return transformation3;
    };
    return CardCrypto;
}());
exports.CardCrypto = CardCrypto;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2FyZENyeXB0by5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9DYXJkQ3J5cHRvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQXlEO0FBRXpEO0lBQUE7SUFzREEsQ0FBQztJQXJERzs7OztPQUlHO0lBQ0ksdUJBQVksR0FBbkIsVUFBb0IsSUFBUSxFQUFFLEdBQU87UUFDakMsSUFBTSxNQUFNLEdBQUcsdUJBQWMsQ0FBQyxhQUFhLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNsRSxNQUFNLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQzVCLElBQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDN0IsSUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ3hCLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUNyRCxDQUFDO0lBQ00sdUJBQVksR0FBbkIsVUFBb0IsTUFBYSxFQUFFLE9BQWMsRUFBRSxLQUFZO1FBQzNELFVBQVU7UUFDVixJQUFJLGFBQWEsR0FBRyxPQUFPLEdBQUcsa0JBQWtCLENBQUE7UUFDaEQsYUFBYSxHQUFHLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxhQUFhLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFFOUYsSUFBSSxHQUFHLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFDcEMsSUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFDNUMsSUFBSSxFQUFFLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFFbEMsSUFBSSxFQUFFLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFDeEIsSUFBSSxFQUFFLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUE7UUFFekIsSUFBSSxFQUFFLEdBQUc7WUFDTCxJQUFJLENBQUMsR0FBRyx1QkFBYyxDQUFDLFNBQVMsRUFBRSxFQUFFLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ3RELENBQUMsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUE7WUFDdkIsT0FBTyxDQUFDLENBQUE7UUFDWixDQUFDLENBQUE7UUFDRCxJQUFJLEVBQUUsR0FBRztZQUNMLElBQUksQ0FBQyxHQUFHLHlCQUFnQixDQUFDLFNBQVMsRUFBRSxFQUFFLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ3hELENBQUMsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUE7WUFDdkIsT0FBTyxDQUFDLENBQUE7UUFDWixDQUFDLENBQUE7UUFFRCxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQTtRQUV4QixJQUFJLGVBQWUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNuRCxJQUFJLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQzVCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDekIsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQzFDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3hCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxlQUFlLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO2FBQzVDO1lBQ0QsZUFBZSxHQUFHLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtTQUN4QztRQUVELElBQUksZ0JBQWdCLEdBQUcsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFBO1FBQ25ELElBQUksZUFBZSxHQUFHLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO1FBRW5ELE9BQU8sZUFBZSxDQUFBO0lBQzFCLENBQUM7SUFFTCxpQkFBQztBQUFELENBQUMsQUF0REQsSUFzREM7QUF0RFksZ0NBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVDaXBoZXJpdiwgY3JlYXRlRGVjaXBoZXJpdiB9IGZyb20gXCJjcnlwdG9cIlxyXG5cclxuZXhwb3J0IGNsYXNzIENhcmRDcnlwdG8ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxjdWxhdGVzIGEgREVTIHNlc3Npb24ga2V5IGFzIHBlciBHUCBDYXJkIFNwZWMgMi4xLjEgRS40LjEuXHJcbiAgICAgKiBAcGFyYW0gZGF0YSB0aGUgaW5wdXQgZGF0YVxyXG4gICAgICogQHBhcmFtIGtleSB0aGUgY2lwaGVyIGtleVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgdHJpcGxlRGVzQ2JjKGRhdGE6YW55LCBrZXk6YW55KSB7ICAgICAgICBcclxuICAgICAgICBjb25zdCBjaXBoZXIgPSBjcmVhdGVDaXBoZXJpdignZGVzLWVkZS1jYmMnLCBrZXksIEJ1ZmZlci5hbGxvYyg4KSlcclxuICAgICAgICBjaXBoZXIuc2V0QXV0b1BhZGRpbmcoZmFsc2UpXHJcbiAgICAgICAgY29uc3QgYiA9IGNpcGhlci51cGRhdGUoZGF0YSlcclxuICAgICAgICBjb25zdCBmID0gY2lwaGVyLmZpbmFsKClcclxuICAgICAgICByZXR1cm4gQnVmZmVyLmNvbmNhdChbYiwgZl0sIGIubGVuZ3RoICsgZi5sZW5ndGgpXHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZ2V0UmV0YWlsTWFjKGtleXN0cjpzdHJpbmcsIGRhdGFzdHI6c3RyaW5nLCBpdnN0cjpzdHJpbmcpIHtcclxuICAgICAgICAvLyBiaXQgcGFkXHJcbiAgICAgICAgbGV0IGRhdGFzdHJwYWRkZWQgPSBkYXRhc3RyICsgXCI4MDAwMDAwMDAwMDAwMDAwXCJcclxuICAgICAgICBkYXRhc3RycGFkZGVkID0gZGF0YXN0cnBhZGRlZC5zdWJzdHJpbmcoMCwgZGF0YXN0cnBhZGRlZC5sZW5ndGggLSAoZGF0YXN0cnBhZGRlZC5sZW5ndGggJSAxNikpXHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IGtleSA9IEJ1ZmZlci5mcm9tKGtleXN0ciwgXCJoZXhcIilcclxuICAgICAgICBsZXQgZGF0YSA9IEJ1ZmZlci5mcm9tKGRhdGFzdHJwYWRkZWQsIFwiaGV4XCIpXHJcbiAgICAgICAgbGV0IGl2ID0gQnVmZmVyLmZyb20oaXZzdHIsIFwiaGV4XCIpXHJcbiAgICBcclxuICAgICAgICBsZXQgazEgPSBrZXkuc2xpY2UoMCwgOClcclxuICAgICAgICBsZXQgazIgPSBrZXkuc2xpY2UoOCwgMTYpXHJcbiAgICBcclxuICAgICAgICBsZXQgYzEgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBjID0gY3JlYXRlQ2lwaGVyaXYoXCJkZXMtY2JjXCIsIGsxLCBCdWZmZXIuYWxsb2MoOCkpXHJcbiAgICAgICAgICAgIGMuc2V0QXV0b1BhZGRpbmcoZmFsc2UpXHJcbiAgICAgICAgICAgIHJldHVybiBjXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBjMiA9ICgpID0+IHtcclxuICAgICAgICAgICAgbGV0IGMgPSBjcmVhdGVEZWNpcGhlcml2KFwiZGVzLWNiY1wiLCBrMiwgQnVmZmVyLmFsbG9jKDgpKVxyXG4gICAgICAgICAgICBjLnNldEF1dG9QYWRkaW5nKGZhbHNlKVxyXG4gICAgICAgICAgICByZXR1cm4gY1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBsZXQgYmMgPSBkYXRhLmxlbmd0aCAvIDhcclxuICAgIFxyXG4gICAgICAgIGxldCB0cmFuc2Zvcm1hdGlvbjEgPSBjMSgpLnVwZGF0ZShkYXRhLnNsaWNlKDAsIDgpKVxyXG4gICAgICAgIGxldCBidWZmZXIgPSBCdWZmZXIuYWxsb2MoOClcclxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGJjOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IGJsb2NrID0gZGF0YS5zbGljZSg4ICogaSwgOCAqIChpICsgMSkpXHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgODsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBidWZmZXJbal0gPSB0cmFuc2Zvcm1hdGlvbjFbal0gXiBibG9ja1tqXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybWF0aW9uMSA9IGMxKCkudXBkYXRlKGJ1ZmZlcikgICAgXHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgbGV0IHRyYW5zZm9ybWF0aW9uM2QgPSBjMigpLnVwZGF0ZSh0cmFuc2Zvcm1hdGlvbjEpXHJcbiAgICAgICAgbGV0IHRyYW5zZm9ybWF0aW9uMyA9IGMxKCkudXBkYXRlKHRyYW5zZm9ybWF0aW9uM2QpXHJcbiAgICBcclxuICAgICAgICByZXR1cm4gdHJhbnNmb3JtYXRpb24zXHJcbiAgICB9XHJcblxyXG59Il19